{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5a9f585f-ce5f-4838-baf0-0ece5e09e0de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nAGRICONNECT Streamlit Dashboard (mobile-friendly prototype)\\n\\nFeatures:\\n- Farmer UI: input features -> get recommended crop + estimated yield\\n  - Option to call FastAPI (if running) or use local models from ./models\\n  - Submit feedback (saved locally and optionally forwarded to /feedback)\\n- Policy Maker UI: view model metrics (models/meta.json) and feedback table\\n- Simple layout optimized for mobile/low-bandwidth viewing\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# agriconnect_streamlit.py\n",
    "\"\"\"\n",
    "AGRICONNECT Streamlit Dashboard (mobile-friendly prototype)\n",
    "\n",
    "Features:\n",
    "- Farmer UI: input features -> get recommended crop + estimated yield\n",
    "  - Option to call FastAPI (if running) or use local models from ./models\n",
    "  - Submit feedback (saved locally and optionally forwarded to /feedback)\n",
    "- Policy Maker UI: view model metrics (models/meta.json) and feedback table\n",
    "- Simple layout optimized for mobile/low-bandwidth viewing\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1050398c-2093-4163-8fad-29ef3453be8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import math\n",
    "import joblib\n",
    "import requests\n",
    "import pandas as pd\n",
    "import streamlit as st\n",
    "from datetime import datetime\n",
    "from typing import Optional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11dc2b64-434d-4187-a148-92c00bacaf4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ----------------------------\n",
    "# Config\n",
    "# ----------------------------\n",
    "MODELS_DIR = \"models\"\n",
    "FEEDBACK_DIR = \"feedback\"\n",
    "FEEDBACK_CSV = os.path.join(FEEDBACK_DIR, \"user_feedback.csv\")\n",
    "META_PATH = os.path.join(MODELS_DIR, \"meta.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c8d19c28-6f9f-4aef-94f3-d849a91ff827",
   "metadata": {},
   "outputs": [],
   "source": [
    "# If you run FastAPI locally use this, otherwise leave None to use local mode.\n",
    "DEFAULT_API_URL = \"http://127.0.0.1:8000\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cde2ece0-d23f-4951-8b84-9af88f200322",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ----------------------------\n",
    "# Utilities\n",
    "# ----------------------------\n",
    "def load_local_artifacts():\n",
    "    \"\"\"Load local models and label encoder; return dict or None if not found.\"\"\"\n",
    "    try:\n",
    "        clf = joblib.load(os.path.join(MODELS_DIR, \"ann_crop_classifier.joblib\"))\n",
    "        reg = joblib.load(os.path.join(MODELS_DIR, \"ann_yield_regressor.joblib\"))\n",
    "        le = joblib.load(os.path.join(MODELS_DIR, \"label_encoder.joblib\"))\n",
    "        meta = {}\n",
    "        if os.path.exists(META_PATH):\n",
    "            with open(META_PATH, \"r\") as f:\n",
    "                meta = json.load(f)\n",
    "        return {\"clf\": clf, \"reg\": reg, \"le\": le, \"meta\": meta}\n",
    "    except Exception as e:\n",
    "        st.warning(f\"Local model artifacts not found or failed to load: {e}\")\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6406bcd9-77e8-4c82-97aa-06f1c16f688e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def call_api_predict(api_url, payload):\n",
    "    \"\"\"Call FastAPI /predict endpoint (expects same request schema as PredictRequest).\"\"\"\n",
    "    url = api_url.rstrip(\"/\") + \"/predict\"\n",
    "    resp = requests.post(url, json=payload, timeout=10)\n",
    "    resp.raise_for_status()\n",
    "    return resp.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "97e9d359-df99-4910-969f-0f32281a5b6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def call_api_feedback(api_url, payload):\n",
    "    url = api_url.rstrip(\"/\") + \"/feedback\"\n",
    "    resp = requests.post(url, json=payload, timeout=10)\n",
    "    resp.raise_for_status()\n",
    "    return resp.json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8a01cb04-0aa9-4b94-b794-d5fffe959903",
   "metadata": {},
   "outputs": [],
   "source": [
    "def save_feedback_local(feature_data, prediction, user_feedback, storage_path=FEEDBACK_CSV):\n",
    "    os.makedirs(FEEDBACK_DIR, exist_ok=True)\n",
    "    row = {\n",
    "        \"timestamp\": datetime.now().isoformat(),\n",
    "        \"feature_data\": json.dumps(feature_data),\n",
    "        \"prediction\": json.dumps(prediction),\n",
    "        \"user_feedback\": user_feedback\n",
    "    }\n",
    "    df = pd.DataFrame([row])\n",
    "    if os.path.exists(storage_path):\n",
    "        df.to_csv(storage_path, mode=\"a\", header=False, index=False)\n",
    "    else:\n",
    "        df.to_csv(storage_path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f2c2c5c4-69f2-46a2-8765-eb3c9019da62",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_feedback(storage_path=FEEDBACK_CSV, max_rows=500):\n",
    "    if not os.path.exists(storage_path):\n",
    "        return pd.DataFrame(columns=[\"timestamp\",\"feature_data\",\"prediction\",\"user_feedback\"])\n",
    "    df = pd.read_csv(storage_path)\n",
    "    if len(df) > max_rows:\n",
    "        return df.tail(max_rows)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bffc05b9-7504-406e-855b-26f4fef3a420",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mobile_label(name):\n",
    "    return f\"{name}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7ae983a0-a564-4599-92ea-b317437ec4bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-09 15:06:39.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:39.202 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:39.687 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\python3.12\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-08-09 15:06:39.689 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:39.691 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:39.693 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# App layout\n",
    "# ----------------------------\n",
    "st.set_page_config(page_title=\"AGRICONNECT\", layout=\"centered\", initial_sidebar_state=\"expanded\")\n",
    "st.title(\"AGRICONNECT â€” AI-powered Advisory (Prototype)\")\n",
    "st.markdown(\"Lightweight, mobile-friendly dashboard for crop recommendation & yield estimation.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b6d1a96d-3ab0-459b-a4d1-b1d9995c88c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-09 15:06:41.994 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:41.995 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:41.997 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:41.998 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:41.999 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.002 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.003 Session state does not function when running a script without `streamlit run`\n",
      "2025-08-09 15:06:42.005 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.007 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.008 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.008 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.009 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.011 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.012 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.013 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.014 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.015 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.016 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.018 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.020 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:06:42.021 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "# Sidebar: Mode selection and API toggle\n",
    "st.sidebar.header(\"Settings\")\n",
    "mode = st.sidebar.selectbox(\"You are a\", [\"Farmer\", \"Policy Maker\", \"Admin\"])\n",
    "api_mode = st.sidebar.radio(\"Use backend API or local models?\", [\"Auto (API if available)\", \"Force Local\", \"Force API\"])\n",
    "api_url_input = st.sidebar.text_input(\"API base URL (optional)\", value=DEFAULT_API_URL or \"\")\n",
    "if api_url_input.strip():\n",
    "    api_url = api_url_input.strip()\n",
    "else:\n",
    "    api_url = DEFAULT_API_URL\n",
    "\n",
    "use_api = False\n",
    "if api_mode == \"Force API\":\n",
    "    use_api = True\n",
    "elif api_mode == \"Force Local\":\n",
    "    use_api = False\n",
    "else:\n",
    "    use_api = bool(api_url)  # Auto: use api if provided"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1b9d0faa-bb64-4a27-9cbb-59ee7a68566b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load local artifacts only if needed or for policy view\n",
    "local_artifacts = None\n",
    "if not use_api or mode != \"Farmer\":\n",
    "    local_artifacts = load_local_artifacts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dfe22641-a2d5-4407-be29-c2e31a9bed35",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-09 15:12:03.879 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.883 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.884 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.887 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.888 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.889 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.891 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.892 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.894 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.895 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.896 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.898 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.901 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.903 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.904 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.905 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.907 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.909 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.910 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.911 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.911 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.913 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.914 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.916 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.918 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.922 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.926 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.927 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.928 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.931 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.933 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.935 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.936 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.937 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.939 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.940 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.941 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.941 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.943 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.944 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.946 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.948 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.950 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.952 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.955 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.957 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.959 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:12:03.960 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "# ----------------------------\n",
    "# Farmer view\n",
    "# ----------------------------\n",
    "if mode == \"Farmer\":\n",
    "    st.header(\"Field-level Recommendation (Farmer)\")\n",
    "    st.write(\"Enter your field data below. Designed to be finger-friendly on mobile.\")\n",
    "\n",
    "    with st.form(\"prediction_form\"):\n",
    "        col1, col2 = st.columns([1,1])\n",
    "        with col1:\n",
    "            district = st.number_input(mobile_label(\"District (id)\"), min_value=1, max_value=999, value=12, step=1)\n",
    "            soil_ph = st.number_input(mobile_label(\"Soil pH\"), min_value=3.0, max_value=10.0, value=6.7, format=\"%.2f\")\n",
    "            rainfall_mm = st.number_input(mobile_label(\"Recent rainfall (mm)\"), min_value=0.0, max_value=5000.0, value=140.0, format=\"%.1f\")\n",
    "        with col2:\n",
    "            temp_c = st.number_input(mobile_label(\"Avg temp (Â°C)\"), min_value=-20.0, max_value=60.0, value=26.0, format=\"%.1f\")\n",
    "            prev_yield = st.number_input(mobile_label(\"Prev yield (t/ha)\"), min_value=0.0, max_value=20.0, value=1.3, format=\"%.2f\")\n",
    "            season = st.selectbox(mobile_label(\"Season (code)\"), options=[0,1,2], index=0)\n",
    "\n",
    "        submitted = st.form_submit_button(\"Get Recommendation\")\n",
    "\n",
    "    if submitted:\n",
    "        payload = {\n",
    "            \"district\": int(district),\n",
    "            \"soil_ph\": float(soil_ph),\n",
    "            \"rainfall_mm\": float(rainfall_mm),\n",
    "            \"temp_c\": float(temp_c),\n",
    "            \"prev_yield\": float(prev_yield),\n",
    "            \"season\": int(season)\n",
    "        }\n",
    "\n",
    "        prediction = None\n",
    "        error = None\n",
    "        # 1) Try API if requested\n",
    "        if use_api:\n",
    "            if not api_url:\n",
    "                st.error(\"API URL not configured. Switch to Force Local or provide API URL in sidebar.\")\n",
    "            else:\n",
    "                try:\n",
    "                    res = call_api_predict(api_url, payload)\n",
    "                    # API returns structure: {\"input\": {...}, \"prediction\": {...}}\n",
    "                    prediction = res.get(\"prediction\", res)\n",
    "                except Exception as e:\n",
    "                    error = f\"API predict failed: {e}\"\n",
    "                    st.warning(error)\n",
    "                    prediction = None\n",
    "\n",
    "        # 2) Fall back to local\n",
    "        if prediction is None:\n",
    "            if local_artifacts is None:\n",
    "                st.error(\"Local models aren't available. Please run training script or set API URL.\")\n",
    "            else:\n",
    "                try:\n",
    "                    clf = local_artifacts[\"clf\"]\n",
    "                    reg = local_artifacts[\"reg\"]\n",
    "                    le = local_artifacts[\"le\"]\n",
    "                    # Create DataFrame input identical to training features\n",
    "                    X_in = pd.DataFrame([payload])\n",
    "                    crop_idx = int(clf.predict(X_in)[0])\n",
    "                    crop_name = le.inverse_transform([crop_idx])[0]\n",
    "                    yield_pred = float(reg.predict(X_in)[0])\n",
    "                    conf = None\n",
    "                    try:\n",
    "                        proba = clf.predict_proba(X_in)[0]\n",
    "                        conf = float(proba.max())\n",
    "                    except Exception:\n",
    "                        conf = None\n",
    "                    prediction = {\n",
    "                        \"recommended_crop\": crop_name,\n",
    "                        \"estimated_yield_t_per_ha\": round(yield_pred, 2),\n",
    "                        \"confidence\": conf\n",
    "                    }\n",
    "                except Exception as e:\n",
    "                    st.error(f\"Local prediction failed: {e}\")\n",
    "                    prediction = None\n",
    "\n",
    "        # Show prediction\n",
    "        if prediction:\n",
    "            st.success(f\"Recommended crop: **{prediction['recommended_crop']}**\")\n",
    "            st.info(f\"Estimated yield: **{prediction['estimated_yield_t_per_ha']} t/ha**\")\n",
    "            if prediction.get(\"confidence\") is not None and not math.isnan(prediction[\"confidence\"]):\n",
    "                st.write(f\"Confidence: {prediction['confidence']:.2f}\")\n",
    "            else:\n",
    "                st.write(\"Confidence: N/A\")\n",
    "\n",
    "            # Basic rule-based note (example business logic)\n",
    "            note = \"\"\n",
    "            if rainfall_mm < 20 and prediction['recommended_crop'].lower() in [\"rice\"]:\n",
    "                note = \"Warning: Rainfall is very low for rice; consider irrigation or choosing a drought-tolerant crop.\"\n",
    "            elif prediction['recommended_crop'].lower() == \"groundnut\" and soil_ph < 5.5:\n",
    "                note = \"Note: Groundnut prefers slightly acidic to neutral soils; check soil amendment recommendations.\"\n",
    "            if note:\n",
    "                st.warning(note)\n",
    "\n",
    "            # Feedback form\n",
    "            st.subheader(\"Feedback (helps us improve recommendations)\")\n",
    "            fb_col1, fb_col2 = st.columns([3,1])\n",
    "            with fb_col1:\n",
    "                user_feedback = st.text_area(\"Tell us if recommendation was useful (short):\", key=\"fb_text\")\n",
    "            with fb_col2:\n",
    "                helpful = st.selectbox(\"Was it helpful?\", [\"Yes\", \"No\", \"Partly\"], index=0)\n",
    "            if st.button(\"Submit Feedback\"):\n",
    "                # Save locally and optionally send to API\n",
    "                save_feedback_local(payload, prediction, f\"{helpful} - {user_feedback}\")\n",
    "                sent_api = None\n",
    "                if use_api and api_url:\n",
    "                    try:\n",
    "                        call_api_feedback(api_url, {\n",
    "                            \"feature_data\": payload,\n",
    "                            \"prediction\": prediction,\n",
    "                            \"user_feedback\": f\"{helpful} - {user_feedback}\"\n",
    "                        })\n",
    "                        sent_api = True\n",
    "                    except Exception as e:\n",
    "                        sent_api = False\n",
    "                        st.warning(f\"Failed to forward feedback to API: {e}\")\n",
    "                st.success(\"Thanks! Feedback saved.\")\n",
    "                if sent_api:\n",
    "                    st.write(\"Feedback forwarded to server.\")\n",
    "                # ----------------------------\n",
    "# Policy Maker view\n",
    "# ----------------------------\n",
    "elif mode == \"Policy Maker\":\n",
    "    st.header(\"Policy Dashboard\")\n",
    "    st.markdown(\"Model metrics, recent feedback and quick insights\")\n",
    "\n",
    "    # Model metrics\n",
    "    if local_artifacts and local_artifacts.get(\"meta\"):\n",
    "        st.subheader(\"Model Metrics (local)\")\n",
    "        meta = local_artifacts[\"meta\"]\n",
    "        st.json(meta)\n",
    "        # Nicely format metrics if present\n",
    "        metrics = meta.get(\"metrics\", {})\n",
    "        if metrics:\n",
    "            st.metric(\"Crop Accuracy\", f\"{metrics.get('crop_accuracy', 'N/A'):.3f}\" if metrics.get('crop_accuracy') is not None else \"N/A\")\n",
    "            st.metric(\"Yield RMSE\", f\"{metrics.get('yield_rmse', 'N/A'):.3f}\" if metrics.get('yield_rmse') is not None else \"N/A\")\n",
    "    else:\n",
    "        st.info(\"Local model metadata not available. Run training script or use API to fetch metrics.\")\n",
    "\n",
    "    # Feedback table\n",
    "    st.subheader(\"Recent User Feedback\")\n",
    "    feedback_df = load_feedback()\n",
    "    if feedback_df.empty:\n",
    "        st.write(\"No feedback found yet.\")\n",
    "    else:\n",
    "        # Display with parsed JSON columns\n",
    "        display_df = feedback_df.copy()\n",
    "        # optional: show parsed fields\n",
    "        def short_preview(x, n=80):\n",
    "            try:\n",
    "                s = str(x)\n",
    "                return s if len(s) <= n else s[:n] + \"...\"\n",
    "            except:\n",
    "                return \"\"\n",
    "        display_df[\"feature_preview\"] = display_df[\"feature_data\"].apply(lambda x: short_preview(x))\n",
    "        display_df[\"prediction_preview\"] = display_df[\"prediction\"].apply(lambda x: short_preview(x))\n",
    "        st.dataframe(display_df[[\"timestamp\",\"feature_preview\",\"prediction_preview\",\"user_feedback\"]].sort_values(\"timestamp\", ascending=False))\n",
    "\n",
    "    # Quick retrain note / button (prototype)\n",
    "    st.subheader(\"Retraining\")\n",
    "    st.markdown(\"Retraining can be triggered by admins with new labeled data. In this prototype, retraining is manual (run the training script to retrain models).\")\n",
    "    if st.button(\"Open retraining instructions\"):\n",
    "        st.info(\"Retrain by re-running the training pipeline (agriconnect_pipeline.py) on updated CSVs and replace models in /models. For automated retraining, connect a job runner that watches feedback/label store.\")\n",
    "    # ----------------------------\n",
    "# Admin view\n",
    "# ----------------------------\n",
    "elif mode == \"Admin\":\n",
    "    st.header(\"Admin Panel\")\n",
    "    st.markdown(\"Model artifacts and maintenance tools\")\n",
    "\n",
    "    if os.path.exists(META_PATH):\n",
    "        with open(META_PATH, \"r\") as f:\n",
    "            meta = json.load(f)\n",
    "        st.subheader(\"Meta.json\")\n",
    "        st.json(meta)\n",
    "    else:\n",
    "        st.info(\"No meta.json found in models/\")\n",
    "\n",
    "    st.subheader(\"Download artifacts\")\n",
    "    if os.path.exists(MODELS_DIR):\n",
    "        files = [f for f in os.listdir(MODELS_DIR) if os.path.isfile(os.path.join(MODELS_DIR, f))]\n",
    "        if files:\n",
    "            for fn in files:\n",
    "                st.write(fn)\n",
    "                file_path = os.path.join(MODELS_DIR, fn)\n",
    "                with open(file_path, \"rb\") as fh:\n",
    "                    btn = st.download_button(label=f\"Download {fn}\", data=fh, file_name=fn)\n",
    "        else:\n",
    "            st.write(\"No model files present.\")\n",
    "    else:\n",
    "        st.write(\"models/ directory not found.\")\n",
    "\n",
    "    st.subheader(\"Cleanup / Maintenance\")\n",
    "    if st.button(\"Delete local feedback CSV\"):\n",
    "        if os.path.exists(FEEDBACK_CSV):\n",
    "            os.remove(FEEDBACK_CSV)\n",
    "            st.success(\"Feedback CSV deleted.\")\n",
    "        else:\n",
    "            st.info(\"No feedback CSV found.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2cd32b1c-15f8-4ff7-b6e0-ad98c6f9a375",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-09 15:11:53.890 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:11:53.892 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:11:53.893 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-09 15:11:53.894 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator(_form_data=FormData(form_id='prediction_form'))"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ----------------------------\n",
    "# Footer / copyright\n",
    "# ----------------------------\n",
    "st.markdown(\"---\")\n",
    "st.markdown(\"Prototype by AGRINOVA â€” AGRICONNECT. Extend this to connect WhatsApp, voice I/O, and multi-lingual NLU.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "95e45a42-86ac-4711-8834-52e64e41a972",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
